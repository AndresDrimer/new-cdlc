// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]

  books     Book[]   @relation(fields: [booksById], references: [id])
  booksById String[] @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Book {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  codeDUX            String
  ISBN               String?
  genre              Genre   @relation(fields: [genreId], references: [id])
  genreName          String
  genreId            String  @db.ObjectId
  title              String
  author             String
  urlIntl            String?
  urlLocal           String?
  techSpecs          String?
  authorSpecs        String?
  review             String?
  isDeprecated       Boolean
  isShown            Boolean
  isDigital          Boolean
  isHighlighted      Boolean
  isNew              Boolean
  isColeccion        Boolean
  isCombo            Boolean
  stock              Int?
  discountPercentage Float   @default(0.0)
  priceTN            Float?
  priceML            Float?
  priceUS            Float?
  kg                 Float?
  x                  Float?
  y                  Float?
  z                  Float?
  imgFront           String?
  imgBack            String?
  urlGoogleDoc       String?
  key                String?

  owners     User[]   @relation(fields: [ownersById], references: [id])
  ownersById String[] @db.ObjectId
}

model Genre {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  colorCode          String?
  booksContainedById String[] @db.ObjectId
  book               Book[]
}
